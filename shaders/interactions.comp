#version 460 core

layout(local_size_x=1,local_size_y=1,local_size_z=1) in;

#include "sPhysics.h"
#include "uTime.h"

const float sight_range = 3.f;
const float sight_sq = sight_range*sight_range;

const float avoid_range = 1.f;
const float avoid_sq = avoid_range*avoid_range;

void main() {
	const uint id = gl_GlobalInvocationID.x;
	vec4 sum = vec4(0);
	float num_seen = 0;
	for (int i = 0; i < velocities.length(); ++i) {
		const vec4 to_other = positions[i] - positions[id];
		const float dist_sq = dot(to_other, to_other);

		// sight broad-phase 
		if (sight_sq > dist_sq) {
			num_seen+=1;
			// avoid narrow-phase
			// ignore self-collision
			if (avoid_sq > dist_sq && dist_sq > 1e-4) {
				sum += reflect(velocities[id], velocities[i]);
				continue;
//				num_seen = 1;
//				break;
			}
			sum += velocities[i];
		}
	}

	const vec4 avg_vel = sum/num_seen;
	float new_mag; 
	if(dot(velocities[id],velocities[id]) > dot(avg_vel,avg_vel)) 
		new_mag = length(velocities[id]);
	else
		new_mag = length(avg_vel);
	const vec4 reoriented = new_mag * normalize(sum/num_seen);
	velocities[id] = mix(velocities[id], reoriented, deltaTime);
	colors[id] = vec4(.6 * sin(velocities[id].xyz) + .4, 1);
}