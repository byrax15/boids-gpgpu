#version 460 core

layout(local_size_x=1,local_size_y=1,local_size_z=1) in;

#include "sPhysics.h"
#include "uBoidSight.h"
#include "uSceneWalls.h"
#include "fNoise.h"

void main() {
	const float sight_sq = sight_range * sight_range;
	const float avoid_sq = avoid_range * avoid_range;
	const uint id = gl_GlobalInvocationID.x;

	//inspired by http://www.kfish.org/boids/pseudocode.html
	vec3 cohesion=vec3(0), avoid=vec3(0), align=vec3(0);
	float seen = 0;
	for (uint i = 0; i < positions.length(); ++i){
		if (i == id) continue;

		const vec3 to_other = positions[i].xyz - positions[id].xyz;
		const float dist_to_other_sq = dot(to_other,to_other);
		
		if (dist_to_other_sq > sight_sq) continue;
//		if (dot(to_other, velocities[id].xyz) > 0) continue;
		++seen;
		cohesion += positions[i].xyz;
		align += velocities[i].xyz;
		if(dist_to_other_sq > avoid_sq) continue;
		avoid -= to_other;
	}
	
	if (seen > 1e-1) {
		cohesion = cohesion_strength * (cohesion/seen - positions[id].xyz);
		align = align_strength * align/seen;
	} else {
		cohesion = vec3(0);
		align = vec3(0);
	}
	avoid *= avoid_strength;

	velocities[id].xyz += (cohesion + align + avoid) * deltaTime;
	velocities[id].xyz = clamp(velocities[id].xyz, -scene_size, scene_size);
	colors[id].xyz = normalize(abs(velocities[id].xyz));
	colors[id].z = 1;
}
