#version 460 core

layout(local_size_x=1,local_size_y=1,local_size_z=1) in;

#include "sPhysics.h"
#include "uTime.h"
#include "uBoidSight.h"

float sight_sq = sight_range * sight_range;
float avoid_sq = avoid_range * avoid_range;

void main() {
	const uint id = gl_GlobalInvocationID.x;
	vec4 sum_pos = vec4(0);
	vec4 sum_vel = vec4(0);
	float num_seen = 0;
	
	vec4 sum_avoid = vec4(0);	
	float num_avoid = 0;

	for (int i = 0; i < velocities.length(); ++i) {
		const vec4 to_other = positions[i] - positions[id];
		const float dist_sq = dot(to_other, to_other);

		// sight broad-phase 
		if (sight_sq > dist_sq) {
			num_seen+=1;
			sum_pos += positions[i];
			sum_vel += velocities[i];

			// avoid narrow-phase
			// ignore self-collision
			if (avoid_sq > dist_sq && dist_sq > 1e-4) {
				sum_avoid += reflect(velocities[id], velocities[i]);
				num_avoid += 1;
				continue;
			}
		}
	}

	const vec4 avg_pos = sum_pos/num_seen - positions[id];
	const vec4 avg_vel = sum_vel/num_seen;
	const vec4 avg_avoid = sum_avoid;
	const vec4 goal = cohesion_strength*avg_pos + align_strength*avg_vel + avoid_strength*avg_avoid;
	const float goal_vel = max(length(avg_vel), length(velocities[id]));

	velocities[id] = goal_vel * normalize(mix(velocities[id], goal, deltaTime));
	colors[id] = vec4(.6 * sin(velocities[id].xyz) + .4, 1);
}